Comandos linux
	puedes usar printenv para ver las variables de entorno en linux

Eliminar contenedor
	$ docker rm <contenedor> -f

Ver los volumenes
	$ docker volume ls

Puertos -
	En el docker file solamente pones el puerto que va a exponer, para acceder a él desde tu computadora
	tienes que agregra el flag -p <maquina>:<contenedor>

Variables de entorno
	puedes agregar un valor por defecto en el docker file con el valor
	ENV PORT <puerto>
	y a través de la consola enviarlo con el flag
	$ ... --env PORT=4444 ...
	o para usar un archivo .env
	$ ... --envfile ./.env ...

Docker-compose
	detener los contenedores y eliminar los volumenes
	$ doco down -v

Correr multiples docker-compose files
	para correr tienes que usar estos comandos, el primer contenedor heredará al segundo
	$ docker-compose -f docker-compose.yaml -f docker-compose.<dev|prod>.yaml up -d
	para detenerlos usar este comando
	$ docker-compose -f docker-compose.yaml -f docker-compose.<dev|prod>.yaml down -v


Actualizar codigo
	para ello usas un tipo de volumen llamado bind mount
	$ ... -v <pathtofolderlocalmachine>:<pathtofoldercontainer> ...
	UNIX
		$ ... -v $(pwd):<pathtofoldercontainer> ...

Bug, no abre la pagina al no tener node modules - nodemon not found
	con el -v bind tu directorio actual sin node_modules remplaza el directorio del contenedor
	por eso las dependencias no están disponibles
	al eliminar node_modules en la pc se elimina también en el contenedor
	$ -v /app/node_modules

Bug, el contenedor crea archivos dentro de nuestra maquina
	tienes que crear un $ -v readonly
		$ ... -v $(pwd):<pathtofoldercontainer>:ro ...

Bug cada vez que se crea una nueva imagen el volumen de node_modules se mantiene activo
	DANGER $ docker volume prune
	DANGER $ docker rm <container-name> -fv

Bug docker-compose no crea nuevas imagenes tienes que decirle cuándo hagas cambios en el Dockerfile
	$ doco up --build

Bug nodemon y las dependencias de desarrollo se mantienen en la instancia de produccion
	tienes que agregar un if statement de bash en el docker file de este estilo
		ARG NODE_ENV
		RUN if [ "$NODE_ENV" = "development"]; \
			then npm install;\
			else npm install --only=production;\
			fi
	ademas de que tambien tienes que agregar configuracion en los docker-compose files
		node-app:
		build:
			context: .
			args:
				NODE_ENV: <development|production>

problema empieza en minuto 1:35

Guardar informacion de la base de datos